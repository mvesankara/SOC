from pydantic import BaseModel, ConfigDict
from typing import Optional, List
from datetime import datetime
from .models import CriticiteLevel, StatutIncident # Reusing enums from SQLAlchemy model

# Pydantic models (schemas) for API request/response validation and serialization

class IncidentBase(BaseModel):
    title: str
    criticite: CriticiteLevel
    statut: StatutIncident
    type: Optional[str] = None
    source: Optional[str] = None

class IncidentCreate(IncidentBase):
    # No extra fields needed for creation beyond what's in IncidentBase for now
    # Timestamp will be auto-generated by the database or application logic
    pass

class IncidentUpdate(BaseModel):
    title: Optional[str] = None
    criticite: Optional[CriticiteLevel] = None
    statut: Optional[StatutIncident] = None
    type: Optional[str] = None
    source: Optional[str] = None

class IncidentRead(IncidentBase):
    id: int
    timestamp: datetime

    # Pydantic V2 config for ORM mode
    model_config = ConfigDict(from_attributes=True)

# For listing multiple incidents
class IncidentList(BaseModel):
    items: List[IncidentRead]
    total: int
    # Add skip, limit if you want to return them in the response
    # skip: int
    # limit: int
